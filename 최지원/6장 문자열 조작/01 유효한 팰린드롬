# 01 유효한 팰린드롬

[Valid Palindrome - LeetCode](https://leetcode.com/problems/valid-palindrome/)

A phrase is a **palindrome** if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.
Given a string `s`, return `true` *if it is a **palindrome**, or* `false` *otherwise*.

**Example 1:**
```
Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.
```

## ✍ 풀이

주어진 문자열이 뒤집었을 때도 같은 문자열이 되는지 확인하는 문제이다.
리스트를 만들어 각 문자가 영문자인지 확인 후, 맞으면 (소문자로 바꾸어) 추가한다. 리스트가 1개 이하로 남을 때까지 맨 처음 문자와 맨 마지막 문자가 같은지 pop해서 확인한다.
```python
class Solution(object):
    def isPalindrome(self, s):
        """
        :type s: str
        :rtype: bool
        """
        p = []
        for i in s:
            if i.isalnum():
                p.append(i.lower())

        while len(p) > 1:
            if p.pop(0) != p.pop(-1):
                return False

        return True
```

## 💡학습해야할 부분

- `isalnum()` - 영문자, 숫자 여부를 판별하는 함수
- 💡[정규 표현식](https://wikidocs.net/4308)
    - 문자 클래스 [] : [ ] 사이의 문자들과 매치, ‘-‘을 사용하면 두 문자 사이의 범위
        - `[a-zA-Z]`, `[0-9]`
        - `^` : 반대라는 뜻

💡 **자주 사용하는 문자 클래스**
- `\d` - 숫자와 매치, [0-9]와 동일한 표현식이다.
- `\D` - 숫자가 아닌 것과 매치, `[^0-9]`와 동일한 표현식이다.
- `\s` - whitespace 문자와 매치, `[ \t\n\r\f\v]`와 동일한 표현식이다. 맨 앞의 빈 칸은 공백문자(space)를 의미한다.
- `\S` - whitespace 문자가 아닌 것과 매치, `[^ \t\n\r\f\v]`와 동일한 표현식이다.
- `\w` - 문자+숫자(alphanumeric)와 매치, `[a-zA-Z0-9_]`와 동일한 표현식이다.
- `\W` - 문자+숫자(alphanumeric)가 아닌 문자와 매치, `[^a-zA-Z0-9_]`와 동일한 표현식이다.


## 가능한 풀이

1. **데크 자료형을 이용한 최적화**
데크 Deque를 명시적으로 선언하면 속도를 높일 수 있다.
```python
p: Deque = collections.deque()
```

2. **슬라이싱 사용**
```python
s = s.lower()
s = re.sub('[^a-z0-9]', '', s)

return s == s[::-1]
```
